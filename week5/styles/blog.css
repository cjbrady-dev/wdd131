@import url('https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400..700;1,400..700&display=swap');
body {
    font-family: Helvetica, Arial, sans-serif;
}
h1 {
    font-family: Lora, Impact, serif;
    font-size: xx-large;
    text-align: center;
    color: #AF1B3F;
}
.skiptocontent a {
    position: absolute;         
    left: -999px;                
    top: 10px;                   
    background-color: #000;       
    color: #fff;                  
    padding: 10px;
    z-index: 1000;               
}

/* Focus state */
.skiptocontent a:focus {
    left: 10px;                   
    text-decoration: none;        
}
.nav1 {
    display: flex;
    flex-wrap: wrap; 
    justify-content: right; /* Center the navigation items */
    padding: 10px;
    border-top: 5px solid #EFC69B;
    border-bottom: 5px solid #EFC69B;
    color: #AF1B3F;

    
}

.grid1, .grid2{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px; /* spacing between grid items */
    padding: 10px;
}
.grid1 {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px; /* spacing between grid items */
    padding: 10px;
    text-align: right;
    max-width: 10px;
    margin: 0 auto;
}
.grid-item {
    border: 1px solid#473144;
    text-align: center;
    padding: 20px;
    font-size: 30px;
    list-style-type: none;
}
.grid-item1 {
    grid-column: 1 / 2;
}
.grid-item2 {
    grid-column: 2 / 3;
}
.grid-item3 {
    grid-column: 3 / 4;

}

/* Gold color: #EFC69B
Red color: #AF1B3F
Dark color: #473144
Body font: Helvetica, Arial, sans-serif
Headline font: Lora, Impact, serif (Lora can be found on Google Fonts.)

There are 3 places where we will need to use simple grids.

For the navigation in the header
For the main body of the page to get the articles to appear on the left and the box that will hold the filters on the right.
Inside of each article to get the details on the left and the title, image, and description on the right.
We will do the first grid for the navigation together, then you can finish the others on your own.

We need a 3 column grid for the navigation. We can use relative units like fr or exact units (px). In this case where we know how long each link will be and thus the amount of space each needs, and because the menu is aligned to the right side of the layout exact units will work better.

To create the grid for the navigation we need to look at the HTML structure we used for the links and identify the Grid Container and the Grid Items. If your HTML looked similar to what is below:

<nav>
	<ul>
		<li><a href="#">About</a></li>
		<li><a href="#">Archive</a></li>
		<li><a href="#">Search</a></li>
	</ul>
</nav>
...what element would be the container and which elements the items? What selector would you use to select the container? We have one more CSS Grid related task for the navigation. The grid needs to be on the right side of the screen instead of the left. This is easy to do with the grid alignment tools. We can use justify-content: end;, and justify-items: end; to re-align it. We will learn more about CSS Grid alignment in a later lesson, but if you want a preview check out those properties in the CSS Tricks Grid Guide for some idea about how they work.

With the first grid as a model you now should add the other two grids to the page. One to take the article details and place them to the left of the article content, and the other to place the articles to the left of the box that will contain our filters. Add the CSS to create those two grids.

You should follow the same process of identifying the Grid Container and Grid Items first. If all of the elements you need to be Grid Items do not share the same parent in the HTML, you may need to change your HTML structure so that they do. */